<div id="homepage">
  <div id="main-content">
    <nav class="topbar">
      <div class="container">
        <span class="branding">
          <!-- <i class="chatkin-icon icon-logo-chatkin"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span></i> -->
          chatkin
        </span>
        <span class="menu-icon weather-info">
          <i class="chatkin-icon" v-bind:class="weather.iconClass ? weather.iconClass : ''" v-on:click="focusHiddenInput('weatherDetails')"></i>
          <input type="text" id="weather-details-hidden-input" class="offscreen" v-on:focus="visibleMenu = 'weatherDetails'" v-on:blur="visibleMenu = ''" placeholder="Focusing this input shows the weather details."/>
          <div class="popup-menu weather-details" v-bind:class="visibleMenu === 'weatherDetails' ? 'visible' : ''">
            <h4>Weather: {{weather.description}}</h4>
            <h5>{{weather.temp}}&deg; <a target="_blank" href="https://en.wikipedia.org/wiki/Kelvin" v-on:mousedown.prevent>Kelvin</a></h5>
            <p><strong>High:</strong> {{weather.temp_max}}&deg; K</p>
            <p><strong>Low:</strong> {{weather.temp_min}}&deg; K</p>
          </div>
        </span>
        <span class="menu-icon zone-info">
          <i class="chatkin-icon icon-location" v-on:click="focusHiddenInput('zoneDetails')" v-if="!(syncing || errorType)"></i>
          <input type="text" id="zone-details-hidden-input" class="offscreen" v-on:focus="visibleMenu = 'zoneDetails'" v-on:blur="visibleMenu = ''" placeholder="Focusing this input shows the zone details."/>
          <div class="popup-menu zone-details" v-bind:class="visibleMenu === 'zoneDetails' ? 'visible' : ''">
            <h4>Zone #{{zone.id}}:</h4>
            <div id="map"></div>
            <span v-if="zone.otherUsersHere.length === 0">You are the only one here.</span>
            <span v-else>There {{zone.otherUsersHere.length === 1 ? 'is' : 'are'}} {{zone.otherUsersHere.length}} other {{zone.otherUsersHere.length === 1 ? 'person' : 'people'}}  here.</span>
          </div>
        </span>
      </div>
    </nav>
    <div class="chat-window-wrapper">
      <div class="window container" id="message-window">
        <div class="syncing-box" v-if="syncing || errorType === 'location'">
          <div class="chat-buddy">
            <i class="chatkin-icon icon-globe"></i>
          </div>
          <div v-if="syncing === 'location'" class="loading-message">Getting location from browser...</div>
          <div v-else-if="errorType === 'location'" class="loading-message">Error fetching location.</div>
          <div v-else-if="syncing === 'chatkinServer'" class="loading-message">Communicating with server...</div>
        </div>
        <div class="activity" v-else>
          <template v-for="user in zone.otherUsersHere">
            <div class="remark">
              <div class="avatar">
                <i class="chatkin-icon icon-logo-chatkin" :style="{color: user.avatarColor}"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span></i>
              </div>
              <div class="message" v-if="user.remark !==''">
                <div class="remark-bg" :style="{background: user.avatarColor}"></div>
                <p><i class="tweet-icon chatkin-icon icon-social-twitter" v-if="user.twitterUsername" :style="{color: user.avatarColor}"></i>{{user.remark}}</p>
              </div>
            </div>
          </template>
        </div>
      </div>
    </div>
  </div>
  <div class="form" v-if="!(syncing || errorType)" v-on:click="clickMessageField">
    <div class="container">
      <div class="avatar" :class="editingMessage ? 'hovering' : ''">
        <!-- <i class="chatkin-icon icon-logo-chatkin" style="color: <%= avatarColor %>"></i> -->
        <i class="chatkin-icon icon-logo-chatkin" style="color: <%= avatarColor %>"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span></i>
      </div>
      <input id="update-remark-field"
        v-model="me.message"
        v-bind:disabled="!editingMessage"
        v-on:keydown.stop.enter="submitNewRemark"
        v-on:keydown.stop.esc="cancelEditingRemark"
        type="text"
        class="form-control input-lg"
        :class="!editingMessage ? 'disabled' : ''"
        :placeholder="editingMessage ? '' : 'Click to add a message.'"/>
        <!-- <span class="edit-btn" v-if="!editingMessage" v-on:click="clickMessageField">
          <i class="chatkin-icon icon-pencil"></i>
        </span> -->
    </div>
  </div>
</div>



<!-- hack to make it clear when a fatal error occurs -->
<script>
///////////////////////////////////////////////////////////////////////////////////////////
// Capture uncaught errors (and trigger a fatal error if appropriate)
//
// This NEVER prevents the error from continuing to be uncaught- it's just here
// to ensure that if any JS errors occur, we notice them immediately, even if we
// don't have Chrome dev tools open.
//
// ---------------------------------------------------------------------------------------
// For more info about `window.onerror`, see:
// https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror
///////////////////////////////////////////////////////////////////////////////////////////
window.onerror = function onUncaughtException(message, scriptSrc, lineNo, charNo, err){

  // Just in case the DOM isn't ready yet, wait until it is:
  $(function (){
    // Then prepend a message about the error in the body show it shows up at the top of the page.
    $('body').prepend(
    '<div style="color: red; background: white; padding: 5px; font-size: 14px;">'+
    '  <strong>A fatal error occurred.</strong>'+
    '  <pre>'+err+'</pre>'+
    '</div>'
    );
    // console.error('Fatal error occurred:',err);
  });

  // Returning `true` would suppress the actual uncaught error from
  // showing up in the JavaScript console. But we don't want to play
  // with fire for now.  Just getting access to this is enough.
  // We allow the error to continue to be uncaught.
  return false;
};
</script>
