<div id="homepage">
  <div id="main-content">
    <nav class="topbar">
      <div class="container">
        <span class="branding">
          <!-- <i class="chatkin-icon icon-logo-chatkin"></i>  -->
          <!-- <i class="chatkin-icon icon-logo-chatkin"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></i> -->
          chatkin
        </span>
        <span class="zone-info">
          <!-- <span class="zone-name" v-if="currentZone">#{{currentZone}}</span> -->
          <i class="chatkin-icon icon-location" v-on:click="focusHiddenInput" v-if="currentZone"></i>
          <input type="text" id="zone-details-hidden-input" class="offscreen" v-on:focus="zoneDetailsVisible = true" v-on:blur="zoneDetailsVisible = false" placeholder="Focusing this input shows the zone details."/>
          <div class="zone-details" v-bind:class="zoneDetailsVisible ? 'visible' : ''">
            <h4>Zone #{{currentZone}}:</h4>
            <div id="map"></div>
            <span v-if="numOthersInZone === 0">You are the only one here.</span>
            <span v-else>There {{numOthersInZone === 1 ? 'is' : 'are'}} {{numOthersInZone}} other {{numOthersInZone === 1 ? 'person' : 'people'}}  here.</span>
          </div>
        </span>
      </div>
    </nav>
    <div class="container">
      <div class="window" id="message-window">
        <div class="syncing-box" v-if="syncingLocation || errorFetchingLocation || communicatingWithServer">
          <div class="chat-buddy">
            <i class="chatkin-icon icon-globe"></i>
          </div>
          <div v-if="syncingLocation" class="loading-message">Getting location from browser...</div>
          <div v-else-if="errorFetchingLocation" class="loading-message">Error fetching location.</div>
          <div v-else-if="communicatingWithServer" class="loading-message">Communicating with server...</div>
        </div>
        <div class="activity" v-else>
          <template v-for="user in otherUsersHere">
            <div class="remark">
              <div class="avatar">
                <!-- <i class="chatkin-icon icon-logo-chatkin" :style="{color: user.avatarColor}"></i> -->
                <i class="chatkin-icon icon-logo-chatkin" :style="{color: user.avatarColor}"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></i>
              </div>
              <div class="message" v-if="user.remark !==''">
                <div class="remark-bg" :style="{background: user.avatarColor}"></div>
                <p>{{user.remark}}</p>
              </div>
            </div>
          </template>
        </div>
        <!-- <div v-else class="panel-heading">Welcome, <strong><%= username %></strong>!</div> -->
      </div>
    </div>
  </div>
  <div class="form" v-if="!(syncingLocation || errorFetchingLocation || communicatingWithServer)" v-on:click="enableMessageField">
    <div class="container">
      <div class="avatar" :class="editingMessage ? 'hovering' : ''">
        <!-- <i class="chatkin-icon icon-logo-chatkin" style="color: <%= avatarColor %>"></i> -->
        <i class="chatkin-icon icon-logo-chatkin" style="color: <%= avatarColor %>"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></i>
      </div>
      <input id="update-remark-field"
        v-model="message"
        v-bind:disabled="!editingMessage"
        v-on:keyup.enter="updateRemark"
        type="text"
        class="form-control input-lg"
        :class="!editingMessage ? 'disabled' : ''"
        :placeholder="editingMessage ? '' : 'Click to add a message.'"/>
        <!-- <span class="edit-btn" v-if="!editingMessage" v-on:click="enableMessageField">
          <i class="chatkin-icon icon-pencil"></i>
        </span> -->
    </div>
  </div>
</div>

<!-- hack to make it clear when a fatal error occurs -->
<script>
///////////////////////////////////////////////////////////////////////////////////////////
// Capture uncaught errors (and trigger a fatal error if appropriate)
//
// This NEVER prevents the error from continuing to be uncaught- it's just here
// to ensure that if any JS errors occur, we notice them immediately, even if we
// don't have Chrome dev tools open.
//
// ---------------------------------------------------------------------------------------
// For more info about `window.onerror`, see:
// https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror
///////////////////////////////////////////////////////////////////////////////////////////
window.onerror = function onUncaughtException(message, scriptSrc, lineNo, charNo, err){

  // Just in case the DOM isn't ready yet, wait until it is:
  $(function (){
    // Then prepend a message about the error in the body show it shows up at the top of the page.
    $('body').prepend(
    '<div style="color: red; background: white; padding: 5px; font-size: 14px;">'+
    '  <strong>A fatal error occurred.</strong>'+
    '  <pre>'+err+'</pre>'+
    '</div>'
    );
    // console.error('Fatal error occurred:',err);
  });

  // Returning `true` would suppress the actual uncaught error from
  // showing up in the JavaScript console. But we don't want to play
  // with fire for now.  Just getting access to this is enough.
  // We allow the error to continue to be uncaught.
  return false;
};
</script>
